var Taggi=function(){"use strict";return class{constructor(t,e={}){this.config=t,this.options=Object.assign({defaultSelector:".taggit",debug:!0,fallbackOutput:(t,e)=>`<span class="taggit" data-tag="${e}">${t}</span>`},e),this.init()}init(){Object.entries(this.config).forEach(([t,e])=>{let n=e.selector||this.options.defaultSelector;Array.isArray(n)||(n=[n]);let o=[];n.forEach(t=>{o=o.concat([...document.querySelectorAll(t)])}),o.length&&o.forEach(n=>{const o=n.innerHTML;let c;if(e.regex?(c=this.parseRegex(o,e),console.log(c)):c=this.parseShortcode(o,t,e),n.innerHTML=c.content,e.inject&&c.found.length){let t;if("function"==typeof e.inject?t=e.inject(n):"string"==typeof e.inject&&(t=document.querySelector(e.inject)),!t)return;c.found.forEach(n=>{t.insertAdjacentHTML(`${e.position||"before"}end`,n)})}})})}parseShortcode(t,e,n){const o=[];return{content:t.replace(/\[([^\s\]]+)\s+([^\]]+)\]/g,(t,e,n)=>{let c;return c=this.config[e]?this.config[e].output(n,e):this.options.fallbackOutput?this.options.fallbackOutput(n,e):t,o.push(c),c}),found:o}}parseRegex(t,e){const n=[];let o=t;const c=e.regex;let s;for(;null!==(s=c.exec(t));){const t=s.slice(1),c=e.output(...t);n.push(c),o=o.replace(s[0],"")}return{content:o,found:n}}}}();
//# sourceMappingURL=taggi.js.map
