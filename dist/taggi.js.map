{"version":3,"file":"taggi.js","sources":["../src/index.js"],"sourcesContent":["/**\r\n * Taggi.js\r\n * ============\r\n * Plugin de parsing de shortcodes dans les titres Forumactif (ou autre DOM).\r\n * Chaque shortcode est défini dans une config, avec :\r\n *   - selector : où chercher le shortcode dans le DOM\r\n *   - inject   : où réinjecter la balise (facultatif)\r\n *   - output   : fonction qui retourne le rendu HTML\r\n *\r\n * Exemple d’utilisation :\r\n *\r\n * const taggiConfig = {\r\n *   hashtag: {\r\n *     selector: \".post-title\",        // où parser les shortcodes\r\n *     inject: \".post-tags\",           // où réinjecter les balises détectées\r\n *     output: (content) => `<span class=\"taggi-hashtag\">#${content}</span>`\r\n *   },\r\n *   icon: {\r\n *     selector: \".post-title\",\r\n *     output: (content) => `<i class=\"taggi-icon\">${content}</i>`\r\n *   }\r\n * };\r\n *\r\n * // Démarrage automatique :\r\n * new Taggi(taggiConfig);\r\n *\r\n * HTML d’entrée :\r\n * <h2 class=\"post-title\">Sujet [hashtag urgent] [icon ⭐]</h2>\r\n * <div class=\"post-tags\"></div>\r\n *\r\n * HTML rendu automatiquement :\r\n * <h2 class=\"post-title\">Sujet <span class=\"taggi-hashtag\">#urgent</span> <i class=\"taggi-icon\">⭐</i></h2>\r\n * <div class=\"post-tags\"><span class=\"taggi-hashtag\">#urgent</span></div>\r\n */\r\n\r\nexport default class Taggi {\r\n  constructor(config, options = {}) {\r\n    this.config = config;\r\n    this.options = Object.assign(\r\n      {\r\n        // default options\r\n        defaultSelector: \".taggit\",\r\n        debug: true,\r\n        fallbackOutput: (content, tagName) =>\r\n          `<span class=\"taggit\" data-tag=\"${tagName}\">${content}</span>`,\r\n      },\r\n      options\r\n    );\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Parcourt la config et applique tout automatiquement\r\n   */\r\n  init() {\r\n    Object.entries(this.config).forEach(([tagName, tag]) => {\r\n      // Normaliser les selectors\r\n      let selectors = tag.selector || this.options.defaultSelector;\r\n      if (!Array.isArray(selectors)) selectors = [selectors];\r\n\r\n      // Récupérer tous les éléments correspondant aux selectors\r\n      let elements = [];\r\n      selectors.forEach((sel) => {\r\n        elements = elements.concat([...document.querySelectorAll(sel)]);\r\n      });\r\n\r\n      if (!elements.length) return;\r\n\r\n      elements.forEach((el) => {\r\n        const original = el.innerHTML;\r\n        let parsed;\r\n\r\n        // Si une regex est définie, on l'utilise\r\n\r\n        if (tag.regex) {\r\n          parsed = this.parseRegex(original, tag);\r\n          console.log(parsed);\r\n        } else {\r\n          // sinon on utilise le shortcode classique\r\n          parsed = this.parseShortcode(original, tagName, tag);\r\n        }\r\n\r\n        el.innerHTML = parsed.content;\r\n\r\n        if (tag.inject && parsed.found.length) {\r\n          let injectTarget;\r\n\r\n          if (typeof tag.inject === \"function\") {\r\n            injectTarget = tag.inject(el);\r\n          } else if (typeof tag.inject === \"string\") {\r\n            injectTarget = document.querySelector(tag.inject);\r\n          }\r\n\r\n          if (!injectTarget) return;\r\n\r\n          parsed.found.forEach((rendered) => {\r\n            injectTarget.insertAdjacentHTML(\r\n              `${tag.position || \"before\"}end`,\r\n              rendered\r\n            );\r\n          });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  parseShortcode(text, tagName, tag) {\r\n    const regex = /\\[([^\\s\\]]+)\\s+([^\\]]+)\\]/g; // capture [tagName content]\r\n    const found = [];\r\n\r\n    const content = text.replace(regex, (match, name, inner) => {\r\n      let rendered;\r\n\r\n      if (this.config[name]) {\r\n        rendered = this.config[name].output(inner, name);\r\n      } else if (this.options.fallbackOutput) {\r\n        rendered = this.options.fallbackOutput(inner, name);\r\n      } else {\r\n        rendered = match;\r\n      }\r\n\r\n      found.push(rendered);\r\n      return rendered;\r\n    });\r\n\r\n    return { content, found };\r\n  }\r\n\r\n  parseRegex(text, tag) {\r\n    const found = [];\r\n    let content = text;\r\n\r\n    const regex = tag.regex;\r\n    let match;\r\n\r\n    while ((match = regex.exec(text)) !== null) {\r\n      // match[0] = texte complet\r\n      // match[1..n] = groupes capturés\r\n      const groups = match.slice(1);\r\n      const rendered = tag.output(...groups);\r\n      found.push(rendered);\r\n\r\n      // Supprime le texte original correspondant\r\n      content = content.replace(match[0], \"\");\r\n    }\r\n\r\n    return { content, found };\r\n  }\r\n}\r\n"],"names":["constructor","config","options","this","Object","assign","defaultSelector","debug","fallbackOutput","content","tagName","init","entries","forEach","tag","selectors","selector","Array","isArray","elements","sel","concat","document","querySelectorAll","length","el","original","innerHTML","parsed","regex","parseRegex","console","log","parseShortcode","inject","found","injectTarget","querySelector","rendered","insertAdjacentHTML","position","text","replace","match","name","inner","output","push","exec","groups","slice"],"mappings":"yCAmCe,MACb,WAAAA,CAAYC,EAAQC,EAAU,IAC5BC,KAAKF,OAASA,EACdE,KAAKD,QAAUE,OAAOC,OACpB,CAEEC,gBAAiB,UACjBC,OAAO,EACPC,eAAgB,CAACC,EAASC,IACxB,kCAAkCA,MAAYD,YAElDP,GAEFC,KAAKQ,MACP,CAKA,IAAAA,GACEP,OAAOQ,QAAQT,KAAKF,QAAQY,QAAQ,EAAEH,EAASI,MAE7C,IAAIC,EAAYD,EAAIE,UAAYb,KAAKD,QAAQI,gBACxCW,MAAMC,QAAQH,KAAYA,EAAY,CAACA,IAG5C,IAAII,EAAW,GACfJ,EAAUF,QAASO,IACjBD,EAAWA,EAASE,OAAO,IAAIC,SAASC,iBAAiBH,OAGtDD,EAASK,QAEdL,EAASN,QAASY,IAChB,MAAMC,EAAWD,EAAGE,UACpB,IAAIC,EAcJ,GAVId,EAAIe,OACND,EAASzB,KAAK2B,WAAWJ,EAAUZ,GACnCiB,QAAQC,IAAIJ,IAGZA,EAASzB,KAAK8B,eAAeP,EAAUhB,EAASI,GAGlDW,EAAGE,UAAYC,EAAOnB,QAElBK,EAAIoB,QAAUN,EAAOO,MAAMX,OAAQ,CACrC,IAAIY,EAQJ,GAN0B,mBAAftB,EAAIoB,OACbE,EAAetB,EAAIoB,OAAOT,GACK,iBAAfX,EAAIoB,SACpBE,EAAed,SAASe,cAAcvB,EAAIoB,UAGvCE,EAAc,OAEnBR,EAAOO,MAAMtB,QAASyB,IACpBF,EAAaG,mBACX,GAAGzB,EAAI0B,UAAY,cACnBF,IAGN,KAGN,CAEA,cAAAL,CAAeQ,EAAM/B,EAASI,GAC5B,MACMqB,EAAQ,GAiBd,MAAO,CAAE1B,QAfOgC,EAAKC,QAHP,6BAGsB,CAACC,EAAOC,EAAMC,KAChD,IAAIP,EAWJ,OAREA,EADEnC,KAAKF,OAAO2C,GACHzC,KAAKF,OAAO2C,GAAME,OAAOD,EAAOD,GAClCzC,KAAKD,QAAQM,eACXL,KAAKD,QAAQM,eAAeqC,EAAOD,GAEnCD,EAGbR,EAAMY,KAAKT,GACJA,IAGSH,QACpB,CAEA,UAAAL,CAAWW,EAAM3B,GACf,MAAMqB,EAAQ,GACd,IAAI1B,EAAUgC,EAEd,MAAMZ,EAAQf,EAAIe,MAClB,IAAIc,EAEJ,KAAsC,QAA9BA,EAAQd,EAAMmB,KAAKP,KAAiB,CAG1C,MAAMQ,EAASN,EAAMO,MAAM,GACrBZ,EAAWxB,EAAIgC,UAAUG,GAC/Bd,EAAMY,KAAKT,GAGX7B,EAAUA,EAAQiC,QAAQC,EAAM,GAAI,GACtC,CAEA,MAAO,CAAElC,UAAS0B,QACpB"}